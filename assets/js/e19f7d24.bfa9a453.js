"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6661],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>u,withMDXComponents:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),h=function(e){return function(t){var n=u(t.components);return a.createElement(e,i({},t,{components:n}))}},u=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),h=u(n),c=r,m=h["".concat(s,".").concat(c)]||h[c]||p[c]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},72463:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294);function r(e){var t=e.src,n=e.width,r=void 0===n?"90%":n,i=e.alt,s=void 0===i?"":i,o=e.title;return a.createElement("div",{style:{textAlign:"center",paddingTop:"1rem",paddingBottom:"1rem"}},a.createElement("img",{src:t.default,width:r,alt:s,title:o}))}},63403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>h,toc:()=>c});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),s=n(72463),o=["components"],l={title:"Resilient Relay Applications",author:"Ernie Turner",description:"Resilient Relay Applications",hide_table_of_contents:!1},d=void 0,h={permalink:"/relay/blog/2023/01/03/resilient-relay-apps",source:"@site/blog/2023-01-03-resilient-relay-apps.mdx",title:"Resilient Relay Applications",description:"Resilient Relay Applications",date:"2023-01-03T00:00:00.000Z",formattedDate:"January 3, 2023",tags:[],readingTime:21.655,hasTruncateMarker:!1,authors:[{name:"Ernie Turner"}],frontMatter:{title:"Resilient Relay Applications",author:"Ernie Turner",description:"Resilient Relay Applications",hide_table_of_contents:!1},prevItem:{title:"Relay v15.0",permalink:"/relay/blog/2023/03/30/relay-15"},nextItem:{title:"Introducing the new Relay compiler",permalink:"/relay/blog/2021/12/08/introducing-the-new-relay-compiler"}},u={authorsImageUrls:[void 0]},c=[{value:"How to provide the best experience for customers during service disruptions",id:"how-to-provide-the-best-experience-for-customers-during-service-disruptions",level:2},{value:"Screen Architecture and Error Boundaries",id:"screen-architecture-and-error-boundaries",level:2},{value:"Full Screen Error",id:"full-screen-error",level:3},{value:"Error Messages Everywhere",id:"error-messages-everywhere",level:3},{value:"Empty Fallbacks",id:"empty-fallbacks",level:3},{value:"What should the user see instead?",id:"what-should-the-user-see-instead",level:3},{value:"Critical vs Expected vs Optional UI",id:"critical-vs-expected-vs-optional-ui",level:2},{value:"Critical UI Elements",id:"critical-ui-elements",level:3},{value:"Expected UI Elements",id:"expected-ui-elements",level:3},{value:"Optional UI Elements",id:"optional-ui-elements",level:3},{value:"Element Classification Limits",id:"element-classification-limits",level:3},{value:"Pull To Refresh",id:"pull-to-refresh",level:3},{value:"Work with your Product Managers and Designers",id:"work-with-your-product-managers-and-designers",level:3},{value:"How Relay Can Help",id:"how-relay-can-help",level:2},{value:"Background",id:"background",level:3},{value:"Locality of @required",id:"locality-of-required",level:3},{value:"Using action: LOG vs action: NONE",id:"using-action-log-vs-action-none",level:3},{value:"When to use <code>@required(action:LOG/NONE)</code>",id:"when-to-use-requiredactionlognone",level:3},{value:"When to use @required(action:THROW)",id:"when-to-use-requiredactionthrow",level:3},{value:"A note about using @required(action: THROW) on fields in arrays",id:"a-note-about-using-requiredaction-throw-on-fields-in-arrays",level:4},{value:"When NOT to use @required on a field",id:"when-not-to-use-required-on-a-field",level:3},{value:"Summary",id:"summary",level:2}],p={toc:c};function m(e){var t=e.components,l=(0,r.Z)(e,o);return(0,i.mdx)("wrapper",(0,a.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("admonition",{title:"Guest Post",type:"tip"},(0,i.mdx)("p",{parentName:"admonition"},"This is a guest post written by Ernie Turner, a Staff Engineer at Coinbase. Coinbase has thoroughly adopted Relay in their applications and is a strong ally of the Relay Team. Last year they helped co-develop the ",(0,i.mdx)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=meta.relay"},"Relay VSCode extension"),". Ernie has agreed to share this internal enginnering blog post with us.")),(0,i.mdx)("h2",{id:"how-to-provide-the-best-experience-for-customers-during-service-disruptions"},"How to provide the best experience for customers during service disruptions"),(0,i.mdx)("p",null,"In a perfect world, none of the services at Coinbase would suffer outages, and all fields in our GraphQL schema would resolve correctly all the time. As this isn't practical, Coinbase applications should be resilient to downtime and minimize the impact on customers: a single service suffering downtime should not prevent users from using or interacting with an entire app. However, it's also important that we convey issues to users when our applications aren't working as expected. Showing error messages that convey downtime with retry buttons is a better experience than confusing users with missing content or UI they can't interact with."),(0,i.mdx)("p",null,"This post will cover the common patterns and best practices for dealing with missing data in a Relay application."),(0,i.mdx)("h2",{id:"screen-architecture-and-error-boundaries"},"Screen Architecture and Error Boundaries"),(0,i.mdx)("p",null,"Before we discuss handling service downtime and failures in GraphQL queries, let's first discuss broader screen architecture and how React Error Boundaries can help create a better user experience when used correctly."),(0,i.mdx)("p",null,"Like most things in life, Error Boundaries should be used in moderation. Let's look at a common screen in the Coinbase Retail app."),(0,i.mdx)(s.Z,{src:n(30247),width:"35%",title:"Asset detail screen",mdxType:"Image"}),(0,i.mdx)("p",null,"Any section in the above screen could fail to get the data required to render, but it's how we approach these failures that differentiates what experience a user has with our app. For example, only using a single screen-level ErrorBoundary for any failure causes the app to be unusable when any error occurs, regardless of the significance of that error. In contrast, wrapping each component in its own ErrorBoundary can create just as bad of an experience. Lastly, omitting components with errors entirely is as bad as the other two options. There is no one-size-fits-all approach, so let's break down each of these and explain why they create poor user experiences."),(0,i.mdx)("h3",{id:"full-screen-error"},"Full Screen Error"),(0,i.mdx)(s.Z,{src:n(89622),width:"35%",title:"Full Screen Error",mdxType:"Image"}),(0,i.mdx)("p",null,"The UI above is Coinbase's full-screen error fallback that is displayed if a service is experiencing disruptions and we couldn't get the data necessary to render the components on this screen. In certain situations, this actually creates a good user experience. We may not be giving the user detailed information as to what happened, but in most situations providing the technical cause is not possible, nor would it improve the users' experience. However, we are telling them something isn't working correctly and giving them a clear Retry button to attempt to get the app working again."),(0,i.mdx)("p",null,"If the reason we're showing this to the user is because we can't load something non-critical, like the asset price history graph or their watchlist status, we shouldn't take down the entire screen. Hiding the current price of bitcoin and preventing the user from trading, just because we can't tell them whether bitcoin is on their watchlist, is a negative user experience."),(0,i.mdx)("p",null,"Another negative of this UI is that it hides all app navigation from the user. Even if we have a good reason to show the user a full screen error, that doesn't mean we should hide the rest of the app in the process. A user should still be able to navigate to a different screen. In practice, we should only show users a \u201cfull screen error\u201d and not a \u201cfull app error\u201d."),(0,i.mdx)("h3",{id:"error-messages-everywhere"},"Error Messages Everywhere"),(0,i.mdx)(s.Z,{src:n(80186),width:"35%",title:"Error Messages Everywhere",mdxType:"Image"}),(0,i.mdx)("p",null,"The UI pictured above is, in many ways, worse. This is the opposite end of the previous experience and showing the user a full-screen error would be preferable. Error messages for the price history graph make sense, because the user would expect that UI to be on this screen, but if the user can't even see the price of bitcoin or find the Trade button, we really ought to show them the UI in the first screenshot (but with navigation) - as the core goal and purpose of this screen has been lost."),(0,i.mdx)("p",null,"This image also demonstrates how ErrorBoundaries can be too prevalent. The entire price history graph with the time range selectors should only have a single error message, not one per time range."),(0,i.mdx)("h3",{id:"empty-fallbacks"},"Empty Fallbacks"),(0,i.mdx)(s.Z,{src:n(34407),width:"35%",title:"Empty Fallbacks",mdxType:"Image"}),(0,i.mdx)("p",null,"The UI above is just as bad as the example prior, In this case, our ErrorBoundaries fall back to empty content. For certain UI elements, this makes sense. The missing Share button next to the watchlist isn't critical for this UI, so omitting it makes sense. However, hiding the current price of bitcoin, the price history graph, and the Trade button makes the UI unusable and even somewhat misleading. Even users who don't use the app every day would know that something is off. We also aren't giving the user any option to retry any failures \u2014the user just sees empty content with no way to recover."),(0,i.mdx)("h3",{id:"what-should-the-user-see-instead"},"What should the user see instead?"),(0,i.mdx)("p",null,"The following two screenshots show an example of a better experience for the user. The first screenshot is what the user should see if we can't get the current price of bitcoin or if we can't determine whether the user is allowed to trade. The second screenshot would be a better experience for a user if we couldn't get the current change in the price of bitcoin or the price history."),(0,i.mdx)("div",{style:{display:"flex",justifyContent:"space-around"}},(0,i.mdx)(s.Z,{src:n(38715),title:"Bummer, but at least I know something is wrong and can navigate to a different screen or try to refresh this screen.",mdxType:"Image"}),(0,i.mdx)(s.Z,{src:n(25618),title:"I wish I could see the price history, but at least I can still Trade or try to refresh the price history chart.",mdxType:"Image"})),(0,i.mdx)("p",null,"All of this points to a need to classify sections of the UI on a screen: what is critical for the user's experience, what UI the user expects to see, and what supporting content is optional to the experience."),(0,i.mdx)("h2",{id:"critical-vs-expected-vs-optional-ui"},"Critical vs Expected vs Optional UI"),(0,i.mdx)("p",null,"Not all UI elements in an application screen are the same. Some portions of the UI are critical to the core purpose of the screen, others might just be more informational and helpful to users. For application design at Coinbase, we group UI elements into three categories, ",(0,i.mdx)("strong",{parentName:"p"},"Critical"),", ",(0,i.mdx)("strong",{parentName:"p"},"Expected"),", and ",(0,i.mdx)("strong",{parentName:"p"},"Optional"),"."),(0,i.mdx)("h3",{id:"critical-ui-elements"},"Critical UI Elements"),(0,i.mdx)("p",null,"The parts of a screen that define the core information or interaction a user has with the UI. Without these elements in the UI, the screen does not make sense, and if they were missing, users would be confused and/or angry, as it isn't clear why the app wasn't working as expected."),(0,i.mdx)("p",null,"Suppose we can't load the data necessary to display these critical UI elements. In that case, we should show the user a full-screen error message explaining the problem (if possible) with a retry button that lets them easily attempt to re-request the missing data."),(0,i.mdx)("p",null,"Letting users interact with an application that is missing critical UI elements will cause confusion, anger, and even possible loss of funds if the user is able to complete a transaction without knowing the full details of what is happening."),(0,i.mdx)("p",null,"Examples of Critical UI elements:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"The user's current portfolio balance on the Coinbase app home screen"),(0,i.mdx)("li",{parentName:"ul"},"The Asset Price, Payment Method, and total Purchase Price on the order preview screen"),(0,i.mdx)("li",{parentName:"ul"},"The user's lifetime earnings and earnings per asset on the Earn screen")),(0,i.mdx)("h3",{id:"expected-ui-elements"},"Expected UI Elements"),(0,i.mdx)("p",null,"Expected UI elements are the parts of a screen that might not serve the core purpose of a screen, but that most users would expect to be present. If Expected UI elements are missing from a screen, the user is likely to think that something is wrong, but this wouldn't prevent them from performing the core actions of the screen."),(0,i.mdx)("p",null,"If we can't load the data necessary to display these expected UI elements, we should show the user a component-local error message telling them that there is an expected UI that is missing. These error messages should also be accompanied by a retry button to let the user re-request the missing data. Localized errors have a higher chance of not being seen or interacted with by the user, which is somewhat acceptable since they aren't required for the core purpose of the screen."),(0,i.mdx)("p",null,"Letting users interact with an application that is missing expected UI elements should be acceptable but it might cause confusion about what is happening. Completely omitting these UI elements without an accompanying error message would create a worse experience."),(0,i.mdx)("p",null,"Examples of Expected UI elements:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"An asset's current price on the Buy Asset screen (where they enter the amount to buy)"),(0,i.mdx)("li",{parentName:"ul"},"The price history graph on an asset detail screen"),(0,i.mdx)("li",{parentName:"ul"},"A list of recent transactions on the Coinbase Card screen")),(0,i.mdx)("h3",{id:"optional-ui-elements"},"Optional UI Elements"),(0,i.mdx)("p",null,"Optional UI elements are the parts of a screen that are purely supportive to the main purpose of a screen. Some users might notice these missing elements, but others might be completely unaware that they're supposed to be present at all. In either scenario, a user wouldn't be prevented from accomplishing their main goal on the screen."),(0,i.mdx)("p",null,"If we can't load the data necessary to display these Optional UI elements, we should instead just omit them entirely from the UI. However, this comes with the following risks:"),(0,i.mdx)("p",null,"A. The user might not know that anything is missing\nB. There won't be a way for the user to re-request the data for this UI unless they do a full screen refresh."),(0,i.mdx)("p",null,"Developers should consider these downsides and ensure that they do not cause a negative user experience. Instead, these failures should be logged so that product engineers are notified when the user experience is less than ideal."),(0,i.mdx)("p",null,"Examples of Optional UI Elements:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Offer cards on the asset detail screen"),(0,i.mdx)("li",{parentName:"ul"},"Asset category sections on the Trade screen (New on Coinbase, Top Movers, etc.)"),(0,i.mdx)("li",{parentName:"ul"},"News feed on the Home Screen")),(0,i.mdx)("p",null,"Let's return to the image above and classify the sections of the UI into these categories."),(0,i.mdx)(s.Z,{src:n(53969),width:"35%",title:"Red: critical, Orange: expected, Yellow: optional",mdxType:"Image"}),(0,i.mdx)("h3",{id:"element-classification-limits"},"Element Classification Limits"),(0,i.mdx)("p",null,"In the example above, we have a screen that has two critical components, two expected components, and one optional component. Most screens in an app should only have a handful of critical UI components on them. For some screens, the entire UI might be composed of one single critical component."),(0,i.mdx)("p",null,"The same is true for expected elements. If we have a screen that's composed of five separate expected UI elements, we'd end up with the screenshot above with \u2018Try Again' buttons littered across the app. Limit the number of expected elements and retry buttons on a single screen to only one or two if possible."),(0,i.mdx)("h3",{id:"pull-to-refresh"},"Pull To Refresh"),(0,i.mdx)("p",null,"For all of the above scenarios, users on mobile apps should be able to pull-to-refresh to retry any failed request on a screen. With Relay applications, this will usually mean retrying the full screen-level query. If a screen has any error messages or hidden components because of missing data, using pull-to-refresh should always attempt to fix all of those error conditions."),(0,i.mdx)("h3",{id:"work-with-your-product-managers-and-designers"},"Work with your Product Managers and Designers"),(0,i.mdx)("p",null,"All of this classification is subjective \u2014 and all of the examples above are just one opinion and a designer or PM may have different opinions on how screens should degrade. It is important for cross-functional alignment when designing application UI. Teams should consult engineers, designers, and product managers to ensure seamless and on-brand screens across your entire app."),(0,i.mdx)("h2",{id:"how-relay-can-help"},"How Relay Can Help"),(0,i.mdx)("p",null,"Once you've classified your screen into sections, the next step is to add the proper ErrorBoundaries to your app and configure your components' GraphQL fragments depending on their classification. This is where ",(0,i.mdx)("a",{parentName:"p",href:"https://relay.dev"},"Relay")," can help. Based on our experience working with Relay apps, we've created several best practices around how to deal with missing data from GraphQL queries."),(0,i.mdx)("h3",{id:"background"},"Background"),(0,i.mdx)("p",null,"Our goal at Coinbase is to work with a nullable schema as ",(0,i.mdx)("a",{parentName:"p",href:"https://relay.dev/docs/guides/required-directive/#why-not-implement-this-at-the-schemaserver-level"},"recommended by the Relay team"),". The primary driver is that it puts the decision on how to handle service outages and missing query data in the hands of the client engineer. Without a nullable schema, the decision of what to do with missing data is made on the server (by bubbling up null values to the nearest nullable parent), and the client code has no recourse to change this decision."),(0,i.mdx)("p",null,"This decision is buoyed by the existence of the ",(0,i.mdx)("a",{parentName:"p",href:"https://relay.dev/docs/guides/required-directive/"},"Relay ",(0,i.mdx)("inlineCode",{parentName:"a"},"@required")," directive"),", which allows client engineers to annotate their queries and fragments with directives that tell Relay how to handle missing data at runtime. This reduces boilerplate code that engineers would be required to write otherwise. On the surface, the directive seems very simple: it only comes with three options which are all pretty straightforward. However, when attempting to use this directive for various use cases, it becomes clear that the choice of which option to pick is not always obvious, nor is the decision of whether to use the directive at all."),(0,i.mdx)("h3",{id:"locality-of-required"},"Locality of @required"),(0,i.mdx)("p",null,"One great feature of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive is that it only affects the fragment in which you use it. It will never change the behavior of other fragments that query the same field. This allows you to add or remove the directive without thinking about anything outside your component's scope. This is important because different components may be categorized differently, even if they get data from the same query. Being able to mark fields in fragments of the same query with different ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," arguments is important to help build ideal user experiences."),(0,i.mdx)("h3",{id:"using-action-log-vs-action-none"},"Using action: LOG vs action: NONE"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOG")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"NONE")," actions both have the same runtime behavior, but ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOG")," will send a message to your logging mechanism of choice, logging the full path to the field that was returned as null. For most use cases where the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive is needed, ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOG")," should be used over ",(0,i.mdx)("inlineCode",{parentName:"p"},"NONE"),". The only time ",(0,i.mdx)("inlineCode",{parentName:"p"},"NONE")," should be preferred is if a field is expected to be null for some users."),(0,i.mdx)("p",null,"While the log entry created by using ",(0,i.mdx)("inlineCode",{parentName:"p"},"action: LOG")," isn't likely to be actionable on its own, however, it can be a useful signal as a breadcrumb for future errors. Being able to look at the history of an error and see that a specific field was unexpectedly null can help track down future errors the user might encounter in a workflow."),(0,i.mdx)("h3",{id:"when-to-use-requiredactionlognone"},"When to use ",(0,i.mdx)("inlineCode",{parentName:"h3"},"@required(action:LOG/NONE)")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOG/NONE")," actions should only be used on fields which are necessary to display Optional UI in your components. There are two distinct use cases that this shows up when designing your application"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Your component is Optional UI and shouldn't be rendered at all if a field or set of fields is null"),(0,i.mdx)("li",{parentName:"ol"},"A portion of your component is Optional UI and relies on an object type field where that object makes no sense without one or more of its child fields")),(0,i.mdx)("p",null,"Let's look at a fragment that encompasses both of these use cases:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-graphql"},"fragment MyFragment on Asset {\n  id\n  name @required(action: LOG)\n  slug @required(action: LOG)\n  color\n  supply {\n    total @required(action: LOG)\n    circulating @required(action: LOG)\n  }\n}\n")),(0,i.mdx)("p",null,"For this fragment, we're saying that the entire fragment is invalid if we don't get the name or slug fields. If those fields are returned from the server as null, we can't render this component at all. This fragment also shows how to use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required(action: LOG/NONE)")," directive to invalidate an entire object type field. This fragment says that if we don't have either of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"supply.total")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"supply.circulating")," fields, then the entire supply object is itself invalid and should be null. This nullability will then be used to hide an optional portion of this component's UI."),(0,i.mdx)("p",null,"Now let's see how our component will handle the results from this query:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"const asset = useFragment(\n  graphql`\n    fragment MyFragment on Asset {\n      id\n      name @required(action: LOG)\n      slug @required(action: LOG)\n      color\n      supply {\n        total @required(action: LOG)\n        circulating @required(action: LOG)\n      }\n    }\n  `,\n  assetRef,\n);\n\n// If we couldn't get the required asset name or slug fields, hide this entire UI\nif (asset === null) {\n  return null;\n}\n// Otherwise hide certain portions of the UI if data is missing\nreturn (\n  <>\n    <Title color={asset.color}>{asset.name}</Title>\n    <Subtitle>{asset.slug}</Subtitle>\n    {asset.supply && (\n      <SupplyStats total={asset.supply.total} circulating={asset.supply.circulating} />\n    )}\n  </>\n);\n")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive really shines here because it removes complex null checks that we'd have to write otherwise. Instead of having to check whether both the ",(0,i.mdx)("inlineCode",{parentName:"p"},"asset.name")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"asset.slug")," fields are null, we can simply check if our entire fragment was nulled out and prevent rendering. The same is true when checking whether we should render the SupplyStats component. We only have to check whether the parent field is null in order to know that the two subfields are non-null."),(0,i.mdx)("h3",{id:"when-to-use-requiredactionthrow"},"When to use @required(action:THROW)"),(0,i.mdx)("p",null,"Using ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required(action: THROW)")," is more straightforward. This action should be used on fields that are necessary to render your Expected or Critical UI component. If these fields are returned as null from the server, your component should throw an error to the nearest ErrorBoundary and the user should see an error message."),(0,i.mdx)("p",null,"How far up the tree your ErrorBoundary is depends on how much of the UI you want to remove if there's an error. For example, if we're showing the user an error instead of an asset price history graph, it doesn't make sense to keep the time series buttons still in view, that entire UI should disappear as well. But we don't want to take out the entire screen if this happens either."),(0,i.mdx)("p",null,"Make sure your ErrorBoundary provides a mechanism for the user to retry the failed query to see if they can get the data on a subsequent attempt. We should always pair an error message with an actionable element to let the user recover. We shouldn't rely on the user being able (or knowing) to use the pull-to-refresh to reload the screen."),(0,i.mdx)("h4",{id:"a-note-about-using-requiredaction-throw-on-fields-in-arrays"},"A note about using @required(action: THROW) on fields in arrays"),(0,i.mdx)("p",null,"You should almost never use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"THROW")," action in a component that selects both an array field and fields of that array. As an example of what not to do:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"function Component({ assetPriceRef }) {\n  const { quotes } = useFragment(\n    graphql`\n      fragment ComponentFragment on AssetPriceData {\n        quotes {\n          # Returns an array of items\n          timestamp\n          price @required(action: THROW)\n        }\n      }\n    `,\n    assetPriceRef,\n  );\n}\n")),(0,i.mdx)("p",null,"This component selects both the ",(0,i.mdx)("inlineCode",{parentName:"p"},"quotes")," array along with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"timestamp")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"price")," fields on every item in that array. Putting ",(0,i.mdx)("inlineCode",{parentName:"p"},"THROW")," on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"quotes")," field would be acceptable if we want to show the user an error if we don't get back any quotes. But, putting ",(0,i.mdx)("inlineCode",{parentName:"p"},"THROW")," on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"price")," field would result in showing the user an error if even a single price field in that array was null. That's probably not the behavior we want. If we got back 23 of the 24 quotes for the past day correctly, we should probably still display the results we have and just omit the empty values instead."),(0,i.mdx)("p",null,"Instead, we should use ",(0,i.mdx)("inlineCode",{parentName:"p"},"action: LOG/NONE")," so that we only invalidate a single item in the array instead of all items. We can then optionally filter out the null values in the array if needed."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"function Component({ assetPriceRef }) {\n  const { quotes } = useFragment(\n    graphql`\n      fragment ComponentFragment on AssetPriceData {\n        quotes {\n          # Returns an array of items\n          timestamp\n          price @required(action: LOG)\n        }\n      }\n    `,\n    assetPriceRef,\n  );\n  const validQuotes = quotes.filter(removeNull);\n}\n")),(0,i.mdx)("h3",{id:"when-not-to-use-required-on-a-field"},"When NOT to use @required on a field"),(0,i.mdx)("p",null,"The unhelpful answer to this question would be \u201cdon't use ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," when a field isn't required\u201d. That answer trivializes the decision of what is required and what isn't when the answer is usually more nuanced, especially when your fragment has a dozen fields or more. However, we can follow a number of best practices to decide whether to mark a field as required or not. Again, it is important that you work with your PMs and Designers to help you with these decisions."),(0,i.mdx)("p",null,"There is also a fine line between when to omit the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive vs using it with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LOG/NONE")," action. The primary difference is that you should omit the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive when the UI rendered by that field is Optional UI."),(0,i.mdx)("p",null,"Some components in your application can render a combination of different classifications of UI. For example, a single component might be responsible for displaying both the current price of an asset as well as what percent of users have bought or sold the asset over some time frame. This means the component is mixing both Critical UI (asset price) and Optional UI (buy/sell stats)."),(0,i.mdx)("p",null,"If a field is used to render optional content which can instead be omitted from the UI entirely without causing confusion for the user (remember, that's the definition of Optional UI) then you shouldn't use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive on that field. Instead, you should add checks to your code to omit the UI if the field is null."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"function SomeComponent({ queryRef }) {\n  const { asset } = useFragment(\n    graphql`\n   asset {\n     latestQuote @required(action: THROW) # Required data\n     buyPercent  # Optional data\n   }`,\n    queryRef,\n  );\n\n  return (\n    <div>\n      <div>Price: {asset.latestQuote}</div>\n      {asset.buyPercent !== null && (\n        <>\n          <div>Buy Percent: {asset.buyPercent}</div>\n          <div>Sell Percent: {1 - asset.buyPercent}</div>\n        </>\n      )}\n    </div>\n  );\n}\n")),(0,i.mdx)("p",null,"In this example it would be incorrect to use ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required(action: LOG/NONE)")," on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"buyPercent")," field because that would invalidate the entire fragment which isn't the behavior we want."),(0,i.mdx)("p",null,"Another less common use case of when to omit the ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," directive is when you can provide a safe fallback value. Providing a fallback/default value for a field can be very dangerous if done incorrectly. While there are a few cases where it's potentially safe to fall back to a default value, it's generally pretty rare and should be avoided. However, if you can provide a safe fallback value, you should avoid adding ",(0,i.mdx)("inlineCode",{parentName:"p"},"@required")," to that field and instead use a fallback value."),(0,i.mdx)("p",null,"A couple of guidelines of when to provide a fallback value:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Fallback values for numeric fields (numbers or strings that represent numbers) should not be used.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Using a 0 in place of a missing value will always create more confusion for the user. Coinbase is a financial company and if we can't display accurate values to users, we shouldn't be displaying them at all. Showing a user that their account balance is $0.00 is clearly much worse than showing them an error message. That's an obvious use case, but even places such as the price change percent for an asset, APY% for Coinbase Card, or the amount a user can make via Coinbase Earn should never show 0 if we don't have the actual value."))),(0,i.mdx)("li",{parentName:"ul"},"Fallback values for boolean fields should be used with caution.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"The first choice for a fallback for boolean fields is usually to set the field to false. Depending on what the boolean field represents, falling back to false can create a worse customer experience than showing the user an error. Falling back to false for a field like ",(0,i.mdx)("inlineCode",{parentName:"li"},"isEligibleForOffer")," is probably acceptable because that is likely showing Optional content. Falling back to false for a field like ",(0,i.mdx)("inlineCode",{parentName:"li"},"hasCoinbaseOneSubscription")," would not be acceptable because for a user who is a CoinbaseOne subscriber the content is Expected and the user is going to be confused about why that UI is missing in the app"))),(0,i.mdx)("li",{parentName:"ul"},"Falling back to an empty array for array fields should be used with caution.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"If you're showing the user their list of Coinbase Card transactions, falling back to an empty array is a bad idea, but if you're showing the user a list of recently added assets, it's probably okay to fallback to an empty array to omit the UI from displaying since the component is already doing to have to deal with the case of the array being empty."))),(0,i.mdx)("li",{parentName:"ul"},"String fields should usually just deal with null instead.",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"In some cases, you might want to fallback to an empty string for string fields that are returned as null, but usually this creates the same code path if you just leave the field as null. Most string fields in a schema aren't expected to be empty so falling back to an empty string can create negative user experiences where the user will be shown an empty string instead of actual content.")))),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-tsx"},"function SomeComponent({ queryRef }) {\n  const asset = useFragment(\n    graphql`\n      fragment MyFragment on Asset {\n        canTrade @required(action: THROW) # Required data\n        hasOfferToStake # Optional data\n      }\n    `,\n    assetRef,\n  );\n\n  const showStakeOffer = asset.hasOfferToStake ?? false;\n\n  return (\n    <div>\n      {asset.canTrade && <Button>Trade</Button>}\n      {showStakeOffer && <Button>Stake your currency</Button>}\n    </div>\n  );\n}\n")),(0,i.mdx)("h2",{id:"summary"},"Summary"),(0,i.mdx)("p",null,"If you've taken anything away from this document, hopefully, it's that a lot of thought needs to go into how to handle downtime and service interruptions. Handling failure states is an important part of building world-class applications. Make sure your design and PM team are on the same page with your team when scoping out new features. If they don't give you advice on what to show the user when data is missing, push back to come to a consensus as a team on these decisions."),(0,i.mdx)("p",null,"Relay can be a powerful tool in helping deal with application failures. Its granular ability to help you decide how to deal with failure might involve more work than you're used to. However, this extra effort pays off in the long run and goes a long way to improving customer experience with your applications."))}m.isMDXComponent=!0},30247:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-asset-screen-8bf495a00add38597fe997cecd3791ff.png"},34407:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-empty-fallbacks-bdc4d221f15bc80db48505b71eaf0e60.png"},80186:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-errors-everywhere-0181401186dc69b371358f74ccc6b7db.png"},89622:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-full-app-error-5ea0539d3141ab84d51f5768e2517676.png"},38715:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-full-screen-error-5d2a2ff3f60afd313c7da21b49006cf3.png"},25618:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-missing-sparkline-4e908ee49044c181b875e97066c88649.png"},53969:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});const a=n.p+"assets/images/2023-01-03-resilient-relay-apps-sections-ff21f3c07349fa588b5ae74a1228ecee.png"}}]);