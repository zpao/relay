"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[76978],{3905:(e,t,a)=>{a.r(t),a.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e},o.apply(this,arguments)}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){return function(t){var a=c(t.components);return n.createElement(e,o({},t,{components:a}))}},c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=c(a),p=r,h=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return a?n.createElement(h,i(i({ref:t},s),{},{components:a})):n.createElement(h,i({ref:t},s))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=h;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},35130:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(83117),r=a(80102),o=(a(67294),a(3905)),l=["components"],i={title:"How Relay Enables Optimal Data Fetching",author:"Jordan Eldredge",tags:[],description:"Exploring the tradoeffs that most data fetching strategies are forced to make, and how Relay allows you to have your cake and eat it too.",hide_table_of_contents:!1},d=void 0,s={permalink:"/relay/blog/2023/10/24/how-relay-enables-optimal-data-fetching",source:"@site/blog/2023-10-24-how-relay-enables-optimal-data-fetching.md",title:"How Relay Enables Optimal Data Fetching",description:"Exploring the tradoeffs that most data fetching strategies are forced to make, and how Relay allows you to have your cake and eat it too.",date:"2023-10-24T00:00:00.000Z",formattedDate:"October 24, 2023",tags:[],readingTime:4.31,hasTruncateMarker:!1,authors:[{name:"Jordan Eldredge"}],frontMatter:{title:"How Relay Enables Optimal Data Fetching",author:"Jordan Eldredge",tags:[],description:"Exploring the tradoeffs that most data fetching strategies are forced to make, and how Relay allows you to have your cake and eat it too.",hide_table_of_contents:!1},nextItem:{title:"Relay v15.0",permalink:"/relay/blog/2023/03/30/relay-15"}},m={authorsImageUrls:[void 0]},c=[{value:"Loading experience",id:"loading-experience",level:3},{value:"Suspense cascades",id:"suspense-cascades",level:3},{value:"Composability",id:"composability",level:3},{value:"Granular updates",id:"granular-updates",level:3},{value:"Relay",id:"relay",level:2},{value:"Summary",id:"summary",level:2}],p={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.mdx)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Relay\u2019s approach to application authorship enables a unique combination of\noptimal runtime performance and application maintainability. In this post I\u2019ll\ndescribe the tradeoffs most apps are forced to make with their data fetching and\nthen describe how Relay\u2019s approach allows you to sidestep these tradeoffs and\nachieve an optimal outcome across multiple tradeoff dimensions."),(0,o.mdx)("hr",null),(0,o.mdx)("p",null,"In component-based UI systems such as React, one important decision to make is\nwhere in your UI tree you fetch data. While data fetching can be done at any\npoint in the UI tree, in order to understand the tradeoffs at play, let\u2019s\nconsider the two extremes:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Leaf node: Fetch data directly within each component that uses data"),(0,o.mdx)("li",{parentName:"ul"},"Root node: Fetch all data at the root of your UI and thread it down to leaf\nnodes using prop drilling")),(0,o.mdx)("p",null,"Where in the UI tree you fetch data impacts multiple dimensions of the\nperformance and maintainability of your application. Unfortunately, with naive\ndata fetching, neither extreme is optimal for all dimensions. Let\u2019s look at\nthese dimensions and consider which improve as you move data fetching closer to\nthe leaves, vs. which improve as you move data fetching closer to the root."),(0,o.mdx)("h3",{id:"loading-experience"},"Loading experience"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"\ud83d\udeab Leaf node: If individual nodes fetch data, you will end up with request\ncascades where your UI needs to make multiple request roundtrips in series\n(waterfalls) since each layer of the UI is blocked on its parent layer\nrendering. Additionally, if multiple components happen to use the same data,\nyou will end up fetching the same data multiple times"),(0,o.mdx)("li",{parentName:"ul"},"\u2705 Root node: If all your data is fetched at the root, you will make single\nrequest and render the whole UI without any duplicate data or cascading\nrequests")),(0,o.mdx)("h3",{id:"suspense-cascades"},"Suspense cascades"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"\ud83d\udeab Leaf node: If each individual component needs to fetch data separately,\neach component will suspend on initial render. With the current implementation\nof React, unsuspending results in rerendering from the nearest parent suspense\nboundary. This means you will have to reevaluate product component code O(n)\ntimes during initial load, where n is the depth of the tree."),(0,o.mdx)("li",{parentName:"ul"},"\u2705 Root node: If all your data is fetched at the root, you will suspend a\nsingle time and evaluate product component code only once.")),(0,o.mdx)("h3",{id:"composability"},"Composability"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"\u2705 Leaf node: Using an existing component in a new place is as easy as\nrendering it. Removing a component is as simple as not-rendering it. Similarly\nadding/removing data dependencies can be done fully locally."),(0,o.mdx)("li",{parentName:"ul"},"\ud83d\udeab Root node: Adding an existing component as a child of another component\nrequires updating every query that includes that component to fetch the new\ndata and then threading the new data through all intermediate layers.\nSimilarly, removing a component requires tracing those data dependencies back\nto each root component and determining if the component you removed was that\ndata\u2019s last remaining consumer. The same dynamics apply to adding/removing new\ndata to an existing component.")),(0,o.mdx)("h3",{id:"granular-updates"},"Granular updates"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"\u2705 Leaf node: When data changes, each component reading that data can\nindividually rerender, avoiding the need to rerender unaffected components."),(0,o.mdx)("li",{parentName:"ul"},"\ud83d\udeab Root node: Since all data originates at the root, when any data updates it\nalways forces the root component to update forcing an expensive rerender of\nthe entire component tree.")),(0,o.mdx)("h2",{id:"relay"},"Relay"),(0,o.mdx)("p",null,"Relay leverages GraphQL fragments and a compiler build step to offer a more\noptimal alternative. In an app that uses Relay, each component defines a GraphQL\nfragment which declares the data that it needs. This includes both the concrete\nvalues the component will render as well as the fragments (referenced by name)\nof each direct child component it will render."),(0,o.mdx)("p",null,"At build time, the Relay compiler collects these fragments and builds a single\nquery for each root node in your application. Let\u2019s look at how this approach\nplays out for each of the dimensions described above:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"\u2705 Loading experience - The compiler generated query fetches all data needed\nfor the surface in a single roundtrip"),(0,o.mdx)("li",{parentName:"ul"},"\u2705 Suspense cascades - Since all data is fetched in a single request, we only\nsuspend once, and it\u2019s right at the root of the tree"),(0,o.mdx)("li",{parentName:"ul"},"\u2705 Composability - Adding/removing data from a component, including the\nfragment data needed to render a child component, can be done locally within a\nsingle component. The compiler takes care of updating all impacted root\nqueries"),(0,o.mdx)("li",{parentName:"ul"},"\u2705 Granular updates - Because each component defines a fragment, Relay knows\nexactly which data is consumed by each component. This lets relay perform\noptimal updates where the minimal set of components are rerendered when data\nchanges")),(0,o.mdx)("h2",{id:"summary"},"Summary"),(0,o.mdx)("p",null,"As you can see, Relay\u2019s use of a declarative composable data fetching language\n(GraphQL), combined a compiler step, allows us to achieve optimal outcomes\nacross all of the tradeoff dimensions outlined above:"),(0,o.mdx)("table",null,(0,o.mdx)("thead",{parentName:"table"},(0,o.mdx)("tr",{parentName:"thead"},(0,o.mdx)("th",{parentName:"tr",align:null}),(0,o.mdx)("th",{parentName:"tr",align:null},"Leaf node"),(0,o.mdx)("th",{parentName:"tr",align:null},"Root node"),(0,o.mdx)("th",{parentName:"tr",align:null},"GraphQL/Relay"))),(0,o.mdx)("tbody",{parentName:"table"},(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"Loading experience"),(0,o.mdx)("td",{parentName:"tr",align:null},"\ud83d\udeab"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"Suspense cascades"),(0,o.mdx)("td",{parentName:"tr",align:null},"\ud83d\udeab"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"Composability"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705"),(0,o.mdx)("td",{parentName:"tr",align:null},"\ud83d\udeab"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705")),(0,o.mdx)("tr",{parentName:"tbody"},(0,o.mdx)("td",{parentName:"tr",align:null},"Granular updates"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705"),(0,o.mdx)("td",{parentName:"tr",align:null},"\ud83d\udeab"),(0,o.mdx)("td",{parentName:"tr",align:null},"\u2705")))))}u.isMDXComponent=!0}}]);